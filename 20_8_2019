{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Welcome To Colaboratory","version":"0.3.2","provenance":[{"file_id":"/v2/external/notebooks/welcome.ipynb","timestamp":1566295363537}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"5fCEDCU_qrC0"},"source":["<p><img alt=\"Colaboratory logo\" height=\"45px\" src=\"https://colab.research.google.com/img/colab_favicon.ico\" align=\"left\" hspace=\"10px\" vspace=\"0px\"></p>\n","\n","<h1>Welcome to Colaboratory!</h1>\n","\n","\n","Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud.\n","\n","With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"xitplqMNk_Hc","outputId":"ed4f60d2-878d-4056-c438-352dac39a112","colab":{"height":420}},"source":["#@title Introducing Colaboratory { display-mode: \"form\" }\n","#@markdown This 3-minute video gives an overview of the key features of Colaboratory:\n","from IPython.display import YouTubeVideo\n","YouTubeVideo('inN8seMm7UI', width=600, height=400)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <iframe\n","            width=\"600\"\n","            height=\"400\"\n","            src=\"https://www.youtube.com/embed/inN8seMm7UI\"\n","            frameborder=\"0\"\n","            allowfullscreen\n","        ></iframe>\n","        "],"text/plain":["<IPython.lib.display.YouTubeVideo at 0x7f956e9dda50>"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"GJBs_flRovLc"},"source":["## Getting Started\n","\n","The document you are reading is a  [Jupyter notebook](https://jupyter.org/), hosted in Colaboratory. It is not a static page, but an interactive environment that lets you write and execute code in Python and other languages.\n","\n","For example, here is a **code cell** with a short Python script that computes a value, stores it in a variable, and prints the result:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"gJr_9dXGpJ05","outputId":"5626194c-e802-4293-942d-2908885c3c1f","colab":{"height":35}},"source":["seconds_in_a_day = 24 * 60 * 60\n","seconds_in_a_day"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["86400"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"2fhs6GZ4qFMx"},"source":["To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut \"Command/Ctrl+Enter\".\n","\n","All cells modify the same global state, so variables that you define by executing a cell can be used in other cells:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"-gE-Ez1qtyIA","outputId":"8d2e4259-4682-4e19-b683-7b9087f28820","colab":{"height":35}},"source":["seconds_in_a_week = 7 * seconds_in_a_day\n","seconds_in_a_week"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["604800"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"lSrWNr3MuFUS"},"source":["For more information about working with Colaboratory notebooks, see [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb).\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"-Rh3-Vt9Nev9"},"source":["## More Resources\n","\n","Learn how to make the most of Python, Jupyter, Colaboratory, and related tools with these resources:\n","\n","### Working with Notebooks in Colaboratory\n","- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)\n","- [Guide to Markdown](/notebooks/markdown_guide.ipynb)\n","- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)\n","- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n","- [Interactive forms](/notebooks/forms.ipynb)\n","- [Interactive widgets](/notebooks/widgets.ipynb)\n","\n","### Working with Data\n","- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb) \n","- [Charts: visualizing data](/notebooks/charts.ipynb)\n","- [Getting started with BigQuery](/notebooks/bigquery.ipynb)\n","\n","### Machine Learning Crash Course\n","These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.\n","- [Intro to Pandas](/notebooks/mlcc/intro_to_pandas.ipynb)\n","- [Tensorflow concepts](/notebooks/mlcc/tensorflow_programming_concepts.ipynb)\n","- [First steps with TensorFlow](/notebooks/mlcc/first_steps_with_tensor_flow.ipynb)\n","- [Intro to neural nets](/notebooks/mlcc/intro_to_neural_nets.ipynb)\n","- [Intro to sparse data and embeddings](/notebooks/mlcc/intro_to_sparse_data_and_embeddings.ipynb)\n","\n","### Using Accelerated Hardware\n","- [TensorFlow with GPUs](/notebooks/gpu.ipynb)\n","- [TensorFlow with TPUs](/notebooks/tpu.ipynb)"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"P-H6Lw1vyNNd"},"source":["## Machine Learning Examples: Seedbank\n","\n","To see end-to-end examples of the interactive machine learning analyses that Colaboratory makes possible, check out the [Seedbank](https://research.google.com/seedbank/) project.\n","\n","A few featured examples:\n","\n","- [Neural Style Transfer](https://research.google.com/seedbank/seed/neural_style_transfer_with_tfkeras): Use deep learning to transfer style between images.\n","- [EZ NSynth](https://research.google.com/seedbank/seed/ez_nsynth): Synthesize audio with WaveNet auto-encoders.\n","- [Fashion MNIST with Keras and TPUs](https://research.google.com/seedbank/seed/fashion_mnist_with_keras_and_tpus): Classify fashion-related images with deep learning.\n","- [DeepDream](https://research.google.com/seedbank/seed/deepdream): Produce DeepDream images from your own photos.\n","- [Convolutional VAE](https://research.google.com/seedbank/seed/convolutional_vae): Create a generative model of handwritten digits."]},{"cell_type":"code","metadata":{"id":"bWte7qlAceDv","colab_type":"code","outputId":"e305da82-0302-4ada-d7ac-93aa69972222","executionInfo":{"status":"ok","timestamp":1566281667849,"user_tz":-330,"elapsed":6429,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["#Python function to find the Max of three numbers\n","\n","def max(n1,n2,n3):\n","  \n","    if n1> n2 and n1>n3 :\n","      return (n1,\"is greater than\",n2,\"and\",n3)\n","    elif  n2> n1 and n2>n3 :\n","      return (n2,\"is greater than\",n1,\"and\",n3 ) \n","    elif  n3> n1 and n3>n2 :\n","      return (n3,\"is greater than\",n1,\"and\",n2) \n","    else:\n","      return \" all are equal\"\n","\n","n1=int(input(\"\"))\n","n2=int(input(\"\"))\n","n3=int(input(\"\"))\n","print(\"max of three numbers is\",max(n1,n2,n3))\n","  "],"execution_count":0,"outputs":[{"output_type":"stream","text":["2\n","5\n","3\n","max of three numbers is (5, 'is greater than', 2, 'and', 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Bz9ntMO9gZki","colab_type":"code","outputId":"6bcc1ec4-b89d-4cb3-9824-c7927392657f","executionInfo":{"status":"ok","timestamp":1566279127668,"user_tz":-330,"elapsed":11875,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["#Python function to sum all the numbers in a list\n","def summ(list1):\n","  sum=0\n","  for i in range(r):\n","    sum=sum+list1[i]\n","  return sum\n"," \n","list1=[]\n","r=int(input(\"enter the range:\"))\n","for i in range(1,r+1):\n","  value=int(input(\"enter the values:\"))\n","  list1.append(value)\n","\n","total=summ(list1)\n","print(total)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["enter the range:5\n","enter the values:1\n","enter the values:2\n","enter the values:3\n","enter the values:4\n","enter the values:5\n","15\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qdKXms-PgaM4","colab_type":"code","colab":{}},"source":["#Python function to multiply all the numbers in a list.\n","def mul(list1):\n","  mul=1\n","  for i in range(r):\n","    mul=mul*list1[i]\n","  return mul\n"," \n","list1=[]\n","r=int(input(\"enter the range:\"))\n","for i in range(1,r+1):\n","  value=int(input(\"enter the values:\"))\n","  list1.append(value)\n","\n","total=mul(list1)\n","print(total)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SRnnFi2cqcH3","colab_type":"code","outputId":"a7f86121-a471-4cf5-e7c7-a3e07ac783d6","executionInfo":{"status":"ok","timestamp":1566295766792,"user_tz":-330,"elapsed":10879,"user":{"displayName":"Ritish Naik","photoUrl":"","userId":"07823520503981322905"}},"colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["#Python function that prints out the first n rows of Pascal's triangle\n","def triangle(n):\n","    for i in range (n):\n","        value=1\n","        list1 =[]\n","        for x in range (i):\n","            value = value * ( i-x) * 1 / ( x + 1 )\n","            list1.append(int(value))\n","        print(list1)\n","    print()\n","    \n","n=int(input(\"enter no.of rows:\"))\n","print(triangle(n))    "],"execution_count":1,"outputs":[{"output_type":"stream","text":["enter no.of rows:6\n","[]\n","[1]\n","[2, 1]\n","[3, 3, 1]\n","[4, 6, 4, 1]\n","[5, 10, 10, 5, 1]\n","\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5c5uVXgIy1lN","colab_type":"code","outputId":"e901e730-7b58-4377-8535-e1fde4081dab","executionInfo":{"status":"ok","timestamp":1566284823080,"user_tz":-330,"elapsed":894,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["#Write a Python function to check whether a string is a pangram or not\n","def ispangram(str): \n","    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n","    for i in alphabet: \n","        if i not in str.lower(): \n","            return \"given string is not a pangram\" \n","    return \"given string is a pangram\"  \n","  \n","      \n","\n","string = 'the quick brown fox jumps over the lazy dog'\n","if(ispangram(string) == True): \n","    print(\"Yes\") \n","else: \n","    print(\"No\") "],"execution_count":0,"outputs":[{"output_type":"stream","text":["No\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cbBmwLRb287e","colab_type":"code","outputId":"c79b6de1-a315-4f86-a447-728f2406a490","executionInfo":{"status":"ok","timestamp":1566285734356,"user_tz":-330,"elapsed":3679,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["# Python function to create and print a list where the values are square of numbers between 1 and 30 (both included).\n","def square(list1):\n","\tfor i in range(1,n+1):\n","\t\tlist1.append(i**2)\n","\treturn(list1)\n","\t\n","list1=[]  \n","n=int(input(\"enter the range:\"))\n","print(square(list1))\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["enter the range:30\n","[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zTEgKZfE7fnq","colab_type":"code","outputId":"06ccec66-629c-4553-8119-9458c6a63db2","executionInfo":{"status":"ok","timestamp":1566291253496,"user_tz":-330,"elapsed":7456,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["# Write a Python program to make a chain of function decorators (bold, italic, underline etc.) in Python.\n","def bold(n):\n","  return(\"<b>\",n,\"</b>\")\n","  \n","def italic(n):\n","  return(\"<i>\",n,\"</i>\")\n","  \n","def underline(n):\n","  return(\"<ul>\",n,\"</ul>\")\n","\n","def decorators(str):\n","  print(bold(str))\n","  print(italic(str))\n","  print(underline(str))\n","  \n","str=input(\"enter the string:\")  \n","print(decorators(str))  "],"execution_count":0,"outputs":[{"output_type":"stream","text":["enter the string:hello world\n","('<b>', 'hello world', '</b>')\n","('<i>', 'hello world', '</i>')\n","('<ul>', 'hello world', '</ul>')\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Sab3xDL6d5X2","colab_type":"code","colab":{}},"source":["#Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically\n","\n","#items=[n for n in input().split('-')]\n","#items.sort()\n","#print('-'.join(items))\n","\n","def hyphen(n):\n","  x=[x for x in n.split('-')]\n","  x.sort()\n","  print('-'.join(x))\n","  return True\n"," \n","n=input(\"enter the sequence of words:\")\n","print(hyphen(n))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D1b_QVxTHWPK","colab_type":"code","outputId":"dccdc5c5-6f67-47c6-dcb3-8d08fc981efa","executionInfo":{"status":"error","timestamp":1566291731244,"user_tz":-330,"elapsed":960,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":129}},"source":["# python program to demonstrate keyword arguments\n","def keyword(a,b=\"good morning\"):\n","  return  a,b\n","\n","print(keyword(\"hii\"))\n","print(keyword(\"hii\",\"good evening\"))\n","print(keyword(\"hii\",b=\"how are you!\"))\n","print(keyword(a=\"hello\",b=\"what's going on?\"))\n","print(keyword(a=\"hello\",\"where do you stay?\")) #error"],"execution_count":0,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-60-78c6d005a5cc>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    print(keyword(a=\"hello\",\"where do you stay?\")) ///error\u001b[0m\n\u001b[0m                                                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"id":"PG8sTsaVHch7","colab_type":"code","outputId":"5b6b5a5c-2422-4798-f8db-bfe704d8fd22","executionInfo":{"status":"ok","timestamp":1566292025190,"user_tz":-330,"elapsed":3515,"user":{"displayName":"","photoUrl":"","userId":""}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["#Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument.\n","def factorial(n):\n","  fact=1\n","  for i in range(1,n+1):\n","    fact=fact*i\n","  return fact\n","\n","n=int(input(\"enter the number:\"))\n","print(\"facttorial of a number\",n,\"is:\",factorial(n))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["enter the number:5\n","facttorial of a number 5 is: 120\n"],"name":"stdout"}]}]}