{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 6, 8, 10, 12, 14, 16, 18]\n"
     ]
    }
   ],
   "source": [
    "#Example 1:\n",
    "#map\n",
    "list1=[2,3,4,5,6,7,8,9]\n",
    "list2=list(map(lambda x:x*2 , list1))\n",
    "print(list2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"
     ]
    }
   ],
   "source": [
    "#Example 2:\n",
    "#filter\n",
    "list1=[1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19]\n",
    "list2=list(filter(lambda x:(x%2 != 0),list1))\n",
    "print(list2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188\n"
     ]
    }
   ],
   "source": [
    "#Example 3:\n",
    "#reduce\n",
    "from functools import reduce\n",
    "list1=[3,6,25,29,40,85]\n",
    "sum=reduce((lambda x,y : x+y),list1)\n",
    "print(sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the range:3\n",
      "enter the values:8\n",
      "enter the values:12\n",
      "enter the values:16\n",
      "[4.0, 6.0, 8.0]\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#Example 4:\n",
    "def div(list1):\n",
    "    list2=list(map(lambda x:x/2 , list1))\n",
    "    print(list2)\n",
    "    \n",
    "\n",
    "list1=list()\n",
    "r=int(input(\"enter the range:\"))\n",
    "for i in range(1,r+1):\n",
    "    values=int(input(\"enter the values:\"))\n",
    "    list1.append(values)\n",
    "    \n",
    "print(div(list1))    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the range:5\n",
      "enter the values:2\n",
      "enter the values:6\n",
      "enter the values:1\n",
      "enter the values:8\n",
      "enter the values:3\n",
      "[2, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "#Example 5:\n",
    "def even(list1):\n",
    "    list2=list(filter(lambda x:(x%2 == 0) , list1))\n",
    "    return list2\n",
    "    \n",
    "\n",
    "list1=list()\n",
    "r=int(input(\"enter the range:\"))\n",
    "for i in range(1,r+1):\n",
    "    values=int(input(\"enter the values:\"))\n",
    "    list1.append(values)\n",
    "    \n",
    "print(even(list1))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the range:3\n",
      "enter the values:2\n",
      "enter the values:3\n",
      "enter the values:6\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "#Example 6:\n",
    "def sum(list1):\n",
    "    sum=reduce(lambda x,y:x+y , list1)\n",
    "    return sum\n",
    "    \n",
    "\n",
    "list1=list()\n",
    "r=int(input(\"enter the range:\"))\n",
    "for i in range(1,r+1):\n",
    "    values=int(input(\"enter the values:\"))\n",
    "    list1.append(values)\n",
    "    \n",
    "print(sum(list1))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
